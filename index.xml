<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>http://chenmeanrey.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Dec 2019 02:21:44 +0800</lastBuildDate>
    
	<atom:link href="http://chenmeanrey.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Newblog</title>
      <link>http://chenmeanrey.github.io/post/newblog/</link>
      <pubDate>Tue, 31 Dec 2019 02:21:44 +0800</pubDate>
      
      <guid>http://chenmeanrey.github.io/post/newblog/</guid>
      <description>aaaa bbbb cccc</description>
    </item>
    
    <item>
      <title>1Java8新特性lambda表达式初步</title>
      <link>http://chenmeanrey.github.io/post/1java8%E6%96%B0%E7%89%B9%E6%80%A7lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%9D%E6%AD%A5/</link>
      <pubDate>Tue, 31 Dec 2019 00:01:31 +0800</pubDate>
      
      <guid>http://chenmeanrey.github.io/post/1java8%E6%96%B0%E7%89%B9%E6%80%A7lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%9D%E6%AD%A5/</guid>
      <description>原来的匿名内部类 java @Test public void test1(){ Comparator&amp;lt;Integer&amp;gt; com = new Comparator&amp;lt;Integer&amp;gt;() { @Override public int compare(Integer o1, Integer o2) { return Integer.compare(5,3); } }; //以上在匿名内部类中实现接口直接得到结果 TreeSet&amp;lt;Integer&amp;gt; ts = new TreeSet&amp;lt;&amp;gt;(com); }  用Lambda表达式 全等于上面的代码 java @Test public void test2(){ Comparator&amp;lt;Integer&amp;gt; com =(x,y) -&amp;gt; Integer.compare(x,y); TreeSet&amp;lt;Integer&amp;gt; ts = new TreeSet&amp;lt;&amp;gt;(com); }  查询员工集合中工资大于3500的员工姓名 &amp;gt; 先建立一个员工类 java @Data public class Employee { private String name; private int age; private double salary; }  &amp;gt; 再建一个集合 java List&amp;lt;Employee&amp;gt; employees = Arrays.</description>
    </item>
    
    <item>
      <title>FirstBlog</title>
      <link>http://chenmeanrey.github.io/post/blog/</link>
      <pubDate>Mon, 30 Dec 2019 18:55:38 +0800</pubDate>
      
      <guid>http://chenmeanrey.github.io/post/blog/</guid>
      <description>###注解 - 在一个java-web项目中结构
src-&amp;gt;hello.java springmvc.xml web-&amp;gt;idex.jsp web.xml WEB-INF-&amp;gt;views-&amp;gt;success.jsp  在index.jsp中&amp;lt;a href=&amp;quot;/hello&amp;quot;&amp;gt;Hello&amp;lt;/a&amp;gt;有一个请求hello 在hello.java中有控制器@controller，有方法hello
@Controller public class Hello{ @RequestMapping(&amp;quot;/hello&amp;quot;) public String hello(){ System.out.println(&amp;quot;hello&amp;quot;); return &amp;quot;success&amp;quot;; } }  用@RequestMapping(&amp;ldquo;/hello&amp;rdquo;)注解Java中的hello(),可实现自动分发 web.xml中配置DispatcherServlet的一个初始化参数，配置mvc文件位置和名称 springmvc.xml中配置自动扫描的包，配置试图解析器prefix前缀、suffix后缀(.jsp)
流程示意:index.jsp中的hello请求通过web.xml配置找到注解的相应方法，再通过返回值success找到springmvc.xml中的配置找到success.jsp &amp;gt; @RequestMapping 注解可以在控制器类的级别和/或其中的方法的级别上使用。
RequestMapping接口的源码如下，里面定义了七个属性 public interface RequestMapping extends Annotation { // 指定映射的名称 public abstract String name(); // 指定请求路径的地址 public abstract String[] value(); // 指定请求的方式，是一个RequsetMethod数组，可以配置多个方法 public abstract RequestMethod[] method(); // 指定参数的类型 public abstract String[] params(); public abstract String[] headers(); // 指定数据请求的格式 public abstract String[] consumes(); // 指定返回的内容类型 public abstract String[] produces(); }  常用：1.</description>
    </item>
    
  </channel>
</rss>