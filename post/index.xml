<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>http://chenmeanrey.github.io/post/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Dec 2019 11:58:00 +0800</lastBuildDate>
    
	<atom:link href="http://chenmeanrey.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>4强大的StreamAPI</title>
      <link>http://chenmeanrey.github.io/post/4%E5%BC%BA%E5%A4%A7%E7%9A%84streamapi/</link>
      <pubDate>Tue, 31 Dec 2019 11:58:00 +0800</pubDate>
      
      <guid>http://chenmeanrey.github.io/post/4%E5%BC%BA%E5%A4%A7%E7%9A%84streamapi/</guid>
      <description>###强大的StreamAPI 操作步骤: - 1. 创建Stream - 2. 中间操作 - 3. 终止操作(终端操作)
@Test public void test(){ //1.通过Collection系列集合提供的stream()或parallelStream() List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); Stream&amp;lt;String&amp;gt; stream1 = list.stream(); //2.通过Arrays中的静态方法stream()获取数组流 Employee[] emps = new Employee[10]; Stream&amp;lt;Employee&amp;gt; stream2 = Arrays.stream(emps); //3.通过Stream类中的静态方法of() Stream&amp;lt;String&amp;gt; stream3 = Stream.of(&amp;quot;aa&amp;quot;, &amp;quot;bb&amp;quot;, &amp;quot;cc&amp;quot;); //4.创建无限流 //迭代 Stream&amp;lt;Integer&amp;gt; stream4 = Stream.iterate(0, x -&amp;gt; x + 2); stream4.limit(10).forEach(System.out::println); //生成 Stream.generate(() -&amp;gt; Math.random()) .limit(10) .forEach(System.out::println); }   筛选与切片  filter-接收Lambda,从流中排除某些元素 limit-截断流,使其元素不超过给定数量 skip(n)-跳过元素,返回一个扔掉前n个元素的流,若流中元素不足n个,则返回空流.与limit(n)形成互补 distinct-筛选,通过流所生成元素的hashcode()和equals()去除重复元素   @Test public void test1(){ //中间操作:不会执行任何操作 Stream&amp;lt;Employee&amp;gt; stream = employees.</description>
    </item>
    
    <item>
      <title>3方法引用和构造器引用</title>
      <link>http://chenmeanrey.github.io/post/3%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E5%92%8C%E6%9E%84%E9%80%A0%E5%99%A8%E5%BC%95%E7%94%A8/</link>
      <pubDate>Tue, 31 Dec 2019 02:53:35 +0800</pubDate>
      
      <guid>http://chenmeanrey.github.io/post/3%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E5%92%8C%E6%9E%84%E9%80%A0%E5%99%A8%E5%BC%95%E7%94%A8/</guid>
      <description>###方法引用和构造器引用 * 若Lambda体中的内容有方法已经实现了,我们可以使用方法引用 可以理解为方法引用的Lambda表达式的另外一中表现形式
主要有三种语法格式: - 对象::实例方法名 - 类::静态方法名 - 类::实例方法名 - 注意 - 1、Lambda 体中调用方法的参数列表与返回值类型,要与函数式接口抽象方法的函数列表和返回值类型保持一致 - 2、若Lambda参数列表中的第一参数是实例方法的调用者,而第二个参数是该实例方法的参数时,可以使用ClassName::methodName
//对象::实例方法名 @Test public void test1(){ Consumer&amp;lt;String&amp;gt; con = x -&amp;gt; System.out.println(x); PrintStream ps = System.out; Consumer&amp;lt;String&amp;gt; con1 = ps::println; }  //类::静态方法名 @Test public void test3(){ Comparator&amp;lt;Integer&amp;gt; com = (x,y) -&amp;gt; Integer.compare(x,y); //就全等于 Comparator&amp;lt;Integer&amp;gt; com1 = Integer::compare; System.out.println(com1.compare(5, 3)); }  //类::实例方法名 @Test public void test4(){ String str = &amp;quot;alice&amp;quot;; String str1 =&amp;quot;alice&amp;quot;; BiPredicate&amp;lt;String,String&amp;gt; bp = (x,y) -&amp;gt; x.</description>
    </item>
    
    <item>
      <title>Newblog</title>
      <link>http://chenmeanrey.github.io/post/newblog/</link>
      <pubDate>Tue, 31 Dec 2019 02:21:44 +0800</pubDate>
      
      <guid>http://chenmeanrey.github.io/post/newblog/</guid>
      <description>aaaa bbbb cccc</description>
    </item>
    
    <item>
      <title>1Java8新特性lambda表达式初步</title>
      <link>http://chenmeanrey.github.io/post/1java8%E6%96%B0%E7%89%B9%E6%80%A7lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%9D%E6%AD%A5/</link>
      <pubDate>Tue, 31 Dec 2019 00:01:31 +0800</pubDate>
      
      <guid>http://chenmeanrey.github.io/post/1java8%E6%96%B0%E7%89%B9%E6%80%A7lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%9D%E6%AD%A5/</guid>
      <description>原来的匿名内部类 java @Test public void test1(){ Comparator&amp;lt;Integer&amp;gt; com = new Comparator&amp;lt;Integer&amp;gt;() { @Override public int compare(Integer o1, Integer o2) { return Integer.compare(5,3); } }; //以上在匿名内部类中实现接口直接得到结果 TreeSet&amp;lt;Integer&amp;gt; ts = new TreeSet&amp;lt;&amp;gt;(com); }  用Lambda表达式 全等于上面的代码 java @Test public void test2(){ Comparator&amp;lt;Integer&amp;gt; com =(x,y) -&amp;gt; Integer.compare(x,y); TreeSet&amp;lt;Integer&amp;gt; ts = new TreeSet&amp;lt;&amp;gt;(com); }  查询员工集合中工资大于3500的员工姓名 &amp;gt; 先建立一个员工类 java @Data public class Employee { private String name; private int age; private double salary; }  &amp;gt; 再建一个集合 java List&amp;lt;Employee&amp;gt; employees = Arrays.</description>
    </item>
    
    <item>
      <title>FirstBlog</title>
      <link>http://chenmeanrey.github.io/post/blog/</link>
      <pubDate>Mon, 30 Dec 2019 18:55:38 +0800</pubDate>
      
      <guid>http://chenmeanrey.github.io/post/blog/</guid>
      <description>###注解 - 在一个java-web项目中结构
src-&amp;gt;hello.java springmvc.xml web-&amp;gt;idex.jsp web.xml WEB-INF-&amp;gt;views-&amp;gt;success.jsp  在index.jsp中&amp;lt;a href=&amp;quot;/hello&amp;quot;&amp;gt;Hello&amp;lt;/a&amp;gt;有一个请求hello 在hello.java中有控制器@controller，有方法hello
@Controller public class Hello{ @RequestMapping(&amp;quot;/hello&amp;quot;) public String hello(){ System.out.println(&amp;quot;hello&amp;quot;); return &amp;quot;success&amp;quot;; } }  用@RequestMapping(&amp;ldquo;/hello&amp;rdquo;)注解Java中的hello(),可实现自动分发 web.xml中配置DispatcherServlet的一个初始化参数，配置mvc文件位置和名称 springmvc.xml中配置自动扫描的包，配置试图解析器prefix前缀、suffix后缀(.jsp)
流程示意:index.jsp中的hello请求通过web.xml配置找到注解的相应方法，再通过返回值success找到springmvc.xml中的配置找到success.jsp &amp;gt; @RequestMapping 注解可以在控制器类的级别和/或其中的方法的级别上使用。
RequestMapping接口的源码如下，里面定义了七个属性 public interface RequestMapping extends Annotation { // 指定映射的名称 public abstract String name(); // 指定请求路径的地址 public abstract String[] value(); // 指定请求的方式，是一个RequsetMethod数组，可以配置多个方法 public abstract RequestMethod[] method(); // 指定参数的类型 public abstract String[] params(); public abstract String[] headers(); // 指定数据请求的格式 public abstract String[] consumes(); // 指定返回的内容类型 public abstract String[] produces(); }  常用：1.</description>
    </item>
    
  </channel>
</rss>